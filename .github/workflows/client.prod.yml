name: Client-side (prod)

on:
  push:
    branches: [ main ]


jobs:
  build:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: client

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: "**/package-lock.json"
    
    - name: Install dependencies
      run: npm install
      
    - name: Create .env file
      uses: SpicyPizza/create-envfile@v1.3.1
      with:
        envkey_VITE_RECAPTCHA_PUBLIC: ${{ secrets.VITE_RECAPTCHA_PUBLIC }}
        file_name: .env
        fail_on_empty: true

    - name: Build client-side
      run: npm run build --if-present
    # - run: npm test

    - name: Upload artifact (static content)
      uses: actions/upload-artifact@master
      with:
        name: client-static
        path: client/dist/

  deploy:
    needs: build
    if: success()

    runs-on: ubuntu-latest
    environment:
      name: prod
      url: http://xn--e1ameg9a5c.xn--p1ai

    steps:
    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_DEPLOY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
    - name: Adding Known Hosts
      run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
      working-directory: .

    - uses: actions/checkout@master

    - name: Create GitHub deployment
      uses: chrnorm/deployment-action@releases/v1
      id: deployment
      with:
        token: "${{ github.token }}"
        target_url: https://xn--e1ameg9a5c.xn--p1ai
        environment: prod

    - name: Download static content
      uses: actions/download-artifact@master
      with:
        name: client-static
        path: dist/
    - name: Deploy static content to local server (rsync)
      run: rsync -avz dist/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/ddg-app/

    - name: Update deployment status (success)
      if: success()
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: "${{ github.token }}"
        target_url: https://xn--e1ameg9a5c.xn--p1ai
        state: "success"
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    - name: Update deployment status (failure)
      if: failure()
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: "${{ github.token }}"
        target_url: https://xn--e1ameg9a5c.xn--p1ai
        state: "failure"
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
